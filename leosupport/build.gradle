apply plugin: 'com.android.library'

def getTime() {
    return new Date().format("yyyyMMdd_HHmm", TimeZone.getDefault())
}

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]

    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        flavorDimensions "versionCode"

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        multiDexEnabled true

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }
    sourceSets {
        main {
            jni.srcDirs = []
            jniLibs.srcDirs = ['libs']
        }
    }
    //为了解决部分第三方库重复打包了META-INF的问题
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
    lintOptions {
        abortOnError false
    }
    //MVVM
    dataBinding {
        enabled = true
    }

    android.libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "scalpel_${defaultConfig.versionCode}_${defaultConfig.versionName}_${variant.name}_${getTime()}.aar"
        }

        // 打包完成后复制到的目录
        def outputFileDir = "${rootDir}/aar/"
        // 删除output目录
        delete outputFileDir
        // 打包完成后做的一些事,复制apk到指定文件夹
        variant.assemble.doLast {
            File out = new File(outputFileDir)
            //判断文件夹是否存在
            if (!out.exists()) {
                out.mkdir()
            }
            variant.outputs.forEach { file ->
                if (file.name.contains('release')) {
                    //复制到指定文件夹
                    copy {
                        from file.outputFile
                        into out
                    }
                }
            }
        }

    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    //
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.0'
    // 解析BASE64_JAR包
    implementation files('libs/BASE64Encoder.jar')
    // 多包
    implementation 'androidx.multidex:multidex:2.0.1'
    // WebSocket
    implementation "org.java-websocket:Java-WebSocket:1.4.0"
    // ViewModel
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

}
